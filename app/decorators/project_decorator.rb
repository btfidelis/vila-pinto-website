# -*- coding: UTF-8 -*-
class ProjectDecorator < Draper::Base
  decorates :project
  include Draper::LazyHelpers

  def attendance_days
    @attendance_days ||= Date::DAYNAMES.collect do |day|
      t "attendance_days.#{day.downcase}" if send("attendance_day_#{day.downcase}")
    end.reject(&:nil?).join(", ")
  end

  def attendance_days?
    show_attendance_days && !attendance_days.blank?
  end

  def available_spots?
    show_available_spots && !available_spots.blank?
  end

  def available_spots_description
    pluralize(available_spots, "vaga disponibilizada", "vagas disponibilizadas")
  end

  def available_meals?
    show_meals_quantity && !meals_quantity_value.blank? && !meals_quantity_unit.blank?
  end

  def available_meals_title
    "Refeições servidas por #{t("meals_quantity_unit.#{meals_quantity_unit}")}: &nbsp;".html_safe
  end
  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
